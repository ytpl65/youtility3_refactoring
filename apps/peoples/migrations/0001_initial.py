# Generated by Django 3.2 on 2022-07-04 05:48

import apps.peoples.managers
import apps.peoples.models
from django.conf import settings
import django.contrib.auth.models
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tenants', '0001_initial'),
        ('onboarding', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='People',
            fields=[
                ('id', models.BigAutoField(auto_created = True, primary_key = True, serialize = False, verbose_name='ID')),
                ('password', models.CharField(max_length = 128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank = True, null = True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default = False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('cdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank = True, default = uuid.uuid4, null = True, unique = True)),
                ('peopleimg', models.ImageField(blank = True, default='master/people/blank.png', null = True, upload_to = apps.peoples.models.upload_peopleimg, verbose_name='peopleimg')),
                ('peoplecode', models.CharField(max_length = 50, verbose_name='Code')),
                ('peoplename', models.CharField(max_length = 120, verbose_name='Name')),
                ('loginid', models.CharField(blank = True, max_length = 50, null = True, unique = True, verbose_name='Login Id')),
                ('isadmin', models.BooleanField(default = False, verbose_name='Is Admin')),
                ('is_staff', models.BooleanField(default = False, verbose_name='staff status')),
                ('isverified', models.BooleanField(default = False, verbose_name='Is Active')),
                ('enable', models.BooleanField(default = True, verbose_name='Enable')),
                ('deviceid', models.CharField(default='-1', max_length = 50, verbose_name='Device Id')),
                ('email', apps.peoples.models.SecureString(max_length = 254, verbose_name='Email')),
                ('mobno', apps.peoples.models.SecureString(max_length = 254, null = True, verbose_name='Mob No')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length = 15, null = True, verbose_name='Gender')),
                ('dateofbirth', models.DateField(verbose_name='Date of Birth')),
                ('dateofjoin', models.DateField(verbose_name='Date of Join')),
                ('dateofreport', models.DateField(blank = True, null = True, verbose_name='Date of Report')),
                ('people_extras', models.JSONField(blank = True, default = apps.peoples.models.peoplejson, encoder = django.core.serializers.json.DjangoJSONEncoder, verbose_name='people_extras')),
                ('bu', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_bus', to='onboarding.bt')),
                ('client', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_clients', to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_cusers', to = settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_departments', to='onboarding.typeassist')),
                ('designation', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_designations', to='onboarding.typeassist')),
                ('groups', models.ManyToManyField(blank = True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('muser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_musers', to = settings.AUTH_USER_MODEL)),
                ('peopletype', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='people_types', to='onboarding.typeassist', verbose_name='People Type')),
                ('reportto', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='children', to = settings.AUTH_USER_MODEL, verbose_name='Report to')),
                ('tenant', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.CASCADE, to='tenants.tenant')),
                ('user_permissions', models.ManyToManyField(blank = True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'people',
            },
            managers=[
                ('objects', apps.peoples.managers.PeopleManager()),
            ],
        ),
        migrations.CreateModel(
            name='PermissionGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created = True, on_delete = django.db.models.deletion.CASCADE, parent_link = True, primary_key = True, serialize = False, to='auth.group')),
            ],
            options={
                'verbose_name': 'permissiongroup',
                'verbose_name_plural': 'permissiongroups',
                'db_table': 'permissiongroup',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pgroup',
            fields=[
                ('id', models.BigAutoField(auto_created = True, primary_key = True, serialize = False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('groupname', models.CharField(max_length = 250, verbose_name='Name')),
                ('enable', models.BooleanField(default = True, verbose_name='Enable')),
                ('bu', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgroup_bus', to='onboarding.bt')),
                ('client', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgroup_clients', to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgroup_cusers', to = settings.AUTH_USER_MODEL)),
                ('identifier', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgroup_idfs', to='onboarding.typeassist')),
                ('muser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgroup_musers', to = settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'pgroup',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.peoples.managers.PgroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pgbelonging',
            fields=[
                ('id', models.BigAutoField(auto_created = True, primary_key = True, serialize = False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('isgrouplead', models.BooleanField(default = False, verbose_name='Group Lead')),
                ('assignsites', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelongs_assignsites', to='onboarding.bt')),
                ('bu', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelonging_sites', to='onboarding.bt')),
                ('client', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelonging_clients', to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelonging_cusers', to = settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelonging_musers', to = settings.AUTH_USER_MODEL)),
                ('people', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelongs_peoples', to = settings.AUTH_USER_MODEL)),
                ('pgroup', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='pgbelongs_grps', to='peoples.pgroup')),
                ('tenant', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'pgbelonging',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.peoples.managers.PgblngManager()),
            ],
        ),
        migrations.CreateModel(
            name='Capability',
            fields=[
                ('id', models.BigAutoField(auto_created = True, primary_key = True, serialize = False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default = apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('capscode', models.CharField(max_length = 50, verbose_name='Code')),
                ('capsname', models.CharField(blank = True, default = None, max_length = 1000, null = True, verbose_name='Capability')),
                ('cfor', models.CharField(choices=[('WEB', 'WEB'), ('PORTLET', 'PORTLET'), ('REPORT', 'REPORT'), ('MOB', 'MOB')], default='WEB', max_length = 10, verbose_name='Capability_for')),
                ('enable', models.BooleanField(default = True, verbose_name='Enable')),
                ('client', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='capability_cusers', to = settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='capability_musers', to = settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.RESTRICT, related_name='children', to='peoples.capability', verbose_name='Belongs_to')),
                ('tenant', models.ForeignKey(blank = True, null = True, on_delete = django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Capability',
                'verbose_name_plural': 'Capabilities',
                'db_table': 'capability',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.peoples.managers.CapabilityManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='pgroup',
            constraint = models.UniqueConstraint(fields=('groupname', 'identifier'), name='pgroup_groupname_bu_client_identifier_key'),
        ),
        migrations.AddConstraint(
            model_name='pgroup',
            constraint = models.UniqueConstraint(fields=('groupname', 'identifier'), name='pgroup_groupname_bu_identifier_key'),
        ),
        migrations.AddConstraint(
            model_name='pgbelonging',
            constraint = models.UniqueConstraint(fields=('pgroup', 'people', 'assignsites'), name='pgbelonging_pgroup_people_bu_assignsites_client'),
        ),
        migrations.AddConstraint(
            model_name='capability',
            constraint = models.UniqueConstraint(fields=('capscode', 'cfor'), name='capability_caps_cfor_uk'),
        ),
        migrations.AddConstraint(
            model_name='people',
            constraint = models.UniqueConstraint(fields=('loginid', 'peoplecode', 'bu'), name='peolple_logind_peoplecode_bu_uk'),
        ),
        migrations.AddConstraint(
            model_name='people',
            constraint = models.UniqueConstraint(fields=('peoplecode', 'bu'), name='people_peoplecode_bu'),
        ),
        migrations.AddConstraint(
            model_name='people',
            constraint = models.UniqueConstraint(fields=('loginid', 'bu'), name='people_loginid_bu_uk'),
        ),
        migrations.AddConstraint(
            model_name='people',
            constraint = models.UniqueConstraint(fields=('loginid',), name='people_loginid_uk'),
        ),
        migrations.AddConstraint(
            model_name='people',
            constraint = models.UniqueConstraint(fields=('loginid', 'mobno', 'email'), name='loginid_mobno_email_uk'),
        ),
    ]
