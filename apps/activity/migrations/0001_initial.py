# Generated by Django 3.2.14 on 2022-07-29 07:35

import apps.activity.managers
import apps.activity.models
import apps.peoples.models
import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('onboarding', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenants', '0001_initial'),
        ('peoples', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('assetcode', models.CharField(max_length=50, verbose_name='Asset Code')),
                ('assetname', models.CharField(max_length=250, verbose_name='Asset Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('iscritical', models.BooleanField(verbose_name='Is Critical')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('identifier', models.CharField(choices=[('NONE', 'None'), ('ASSET', 'Asset'), ('CHECKPOINT', 'Checkpoint'), ('LOCATION', 'Location'), ('SMARTPLACE', 'Smartplace'), ('NEA', 'Non Engineering Asset')], default='NONE', max_length=55, verbose_name='Asset Identifier')),
                ('runningstatus', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working'), ('SCRAPPED', 'Scrapped')], max_length=55, verbose_name='Running Status')),
                ('capacity', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, verbose_name='Capacity')),
                ('asset_json', models.JSONField(blank=True, default=apps.activity.models.asset_json, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_brands', to='onboarding.typeassist', verbose_name='Brand')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_bus', to='onboarding.bt', verbose_name='Site')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_categories', to='onboarding.typeassist', verbose_name='Category')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_clients', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_musers', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.asset', verbose_name='Belongs to')),
                ('servprov', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_serv_providers', to='onboarding.bt', verbose_name='Client')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_subcategories', to='onboarding.typeassist', verbose_name='Sub Category')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_types', to='onboarding.typeassist', verbose_name='Type')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='asset_units', to='onboarding.typeassist', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'db_table': 'asset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.AssetManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('devicecode', models.CharField(max_length=50)),
                ('devicename', models.CharField(max_length=50)),
                ('enable', models.BooleanField(default=True)),
                ('devicedesc', models.CharField(max_length=50, null=True)),
                ('ipaddress', models.CharField(blank=True, max_length=100, null=True)),
                ('belongsTo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.device')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='device_cusers', to=settings.AUTH_USER_MODEL)),
                ('devicetype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='device_types', to='onboarding.typeassist')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='device_musers', to=settings.AUTH_USER_MODEL)),
                ('runningStatus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='device_status', to='onboarding.typeassist')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'device',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('eventdesc', models.CharField(blank=True, max_length=250, null=True)),
                ('eventdatetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('category', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('note', models.CharField(blank=True, max_length=100, null=True)),
                ('starttime', models.DateTimeField(blank=True, null=True)),
                ('endtime', models.DateTimeField(blank=True, null=True)),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='event_cusers', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='event_device', to='activity.device')),
                ('eventtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='event_types', to='onboarding.typeassist')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='event_musers', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'event',
                'ordering': ['mdtz'],
                'get_latest_by': ['cdtz', 'mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('jobname', models.CharField(max_length=100, verbose_name='Name')),
                ('jobdesc', models.CharField(max_length=500, verbose_name='Description')),
                ('fromdate', models.DateTimeField(verbose_name='From date')),
                ('uptodate', models.DateTimeField(verbose_name='To date')),
                ('cron', models.CharField(max_length=200, verbose_name='Cron Exp.')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('INTERNALTOUR', 'Internal Tour'), ('EXTERNALTOUR', 'External Tour'), ('PPM', 'PPM'), ('OTHER', 'Other'), ('SITEREPORT', 'Site Report'), ('INCIDENTREPORT', 'Incident Report'), ('ASSETLOG', 'Asset Log'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('GEOFENCE', 'Geofence')], max_length=100, null=True, verbose_name='Job Type')),
                ('planduration', models.IntegerField(verbose_name='Plan duration (min)')),
                ('gracetime', models.IntegerField(verbose_name='Grace Time')),
                ('expirytime', models.IntegerField(verbose_name='Expiry Time')),
                ('lastgeneratedon', models.DateTimeField(auto_now_add=True, verbose_name='Last generatedon')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIU', 'Medium')], max_length=100, verbose_name='Priority')),
                ('seqno', models.SmallIntegerField(verbose_name='Serial No.')),
                ('starttime', models.TimeField(null=True, verbose_name='Start time')),
                ('endtime', models.TimeField(null=True, verbose_name='End time')),
                ('scantype', models.CharField(choices=[('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], max_length=50, verbose_name='Scan Type')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], default='NONE', max_length=55, null=True, verbose_name='Frequency type')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.asset', verbose_name='Asset')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_bus', to='onboarding.bt', verbose_name='Site')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_clients', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_cusers', to=settings.AUTH_USER_MODEL)),
                ('geofence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.geofencemaster', verbose_name='Geofence')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_musers', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.job', verbose_name='Belongs to')),
                ('people', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_aaatops', to=settings.AUTH_USER_MODEL, verbose_name='Aggresive auto-assign to People')),
                ('pgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='peoples.pgroup', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'db_table': 'job',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Jobneed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('jobdesc', models.CharField(max_length=200, verbose_name='Job Description')),
                ('plandatetime', models.DateTimeField(verbose_name='Plan date time')),
                ('expirydatetime', models.DateTimeField(verbose_name='Expiry date time')),
                ('gracetime', models.IntegerField(verbose_name='Grace time')),
                ('receivedonserver', models.DateTimeField(auto_now_add=True, verbose_name='Recived on server')),
                ('starttime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('endtime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('remarks', models.CharField(blank=True, max_length=200, null=True, verbose_name='Remark')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], default='NONE', max_length=55, null=True, verbose_name='Frequency type')),
                ('jobstatus', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('AUTOCLOSED', 'Auto Closed'), ('COMPLETED', 'Completed'), ('INPROGRESS', 'Inprogress'), ('PARTIALLYCOMPLETED', 'Partially Completed'), ('RESOLVED', 'Resolved'), ('OPEN', 'Open'), ('CANCELLED', 'Cancelled'), ('ESCALATED', 'Escalated'), ('NEW', 'New'), ('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working'), ('SCRAPPED', 'Scrapped')], max_length=60, null=True, verbose_name='Job Status')),
                ('jobtype', models.CharField(choices=[('SCHEDULE', 'Schedule'), ('ADHOC', 'Adhoc')], max_length=50, null=True, verbose_name='Job Type')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=50, verbose_name='Priority')),
                ('scantype', models.CharField(choices=[('NONE', 'None'), ('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], default='NONE', max_length=50, verbose_name='Scan type')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('INTERNALTOUR', 'Internal Tour'), ('EXTERNALTOUR', 'External Tour'), ('PPM', 'PPM'), ('OTHER', 'Other'), ('SITEREPORT', 'Site Report'), ('INCIDENTREPORT', 'Incident Report'), ('ASSETLOG', 'Asset Log'), ('ASSETMAINTENANCE', 'Asset Maintenance')], max_length=50, null=True, verbose_name='Jobneed Type')),
                ('alerts', models.BooleanField(default=False, null=True, verbose_name='Alerts')),
                ('seqno', models.SmallIntegerField(verbose_name='Sl No.')),
                ('othersite', models.CharField(default=None, max_length=100, null=True, verbose_name='Other Site')),
                ('multifactor', models.DecimalField(decimal_places=6, default=1, max_digits=10, verbose_name='Multiplication Factor')),
                ('raisedby', models.CharField(default='', max_length=55, null=True, verbose_name='Raised by')),
                ('raisedtktflag', models.BooleanField(default=False, null=True, verbose_name='RaiseTicketFlag')),
                ('ismailsent', models.BooleanField(default=False, verbose_name='Is Mail Sent')),
                ('attachmentcount', models.IntegerField(default=0, verbose_name='Attachment Count')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneed_assets', to='activity.asset', verbose_name='Asset')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneedf_bus', to='onboarding.bt', verbose_name='Site')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneed_clients', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneed_cusers', to=settings.AUTH_USER_MODEL)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobs', to='activity.job', verbose_name='Job')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneed_musers', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.jobneed', verbose_name='Belongs to')),
                ('people', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL, verbose_name='People')),
                ('performedby', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneed_performedby', to=settings.AUTH_USER_MODEL, verbose_name='Performed by')),
                ('pgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='peoples.pgroup', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Jobneed',
                'verbose_name_plural': 'Jobneeds',
                'db_table': 'jobneed',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.JobneedManager()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('quesname', models.CharField(max_length=200, verbose_name='Question Name')),
                ('options', models.TextField(max_length=2000, null=True, verbose_name='Options')),
                ('min', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(max_length=300, null=True, verbose_name='Alert on')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], default='NUMERIC', max_length=55, verbose_name='Type')),
                ('isworkflow', models.BooleanField(default=False, verbose_name='Is WorkFlow')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='category_types', to='onboarding.typeassist', verbose_name='Category')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='question_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='question_musers', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='unit_types', to='onboarding.typeassist', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'question',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.QuestionManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('qsetname', models.CharField(max_length=200, verbose_name='QuestionSet Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('assetincludes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), blank=True, null=True, size=None, verbose_name='Asset Includes')),
                ('buincludes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), blank=True, null=True, size=None, verbose_name='Bu Includes')),
                ('seqno', models.SmallIntegerField(default=1, verbose_name='SL No.')),
                ('type', models.CharField(choices=[('CHECKLIST', 'Checklist'), ('INCIDENTREPORTTEMPLATE', 'Incident Report Template'), ('SITEREPORTTEMPLATE', 'Site Report Template'), ('WORKPERMITTEMPLATE', 'Work Permit Template'), ('KPITEMPLATE', 'Kpi Template'), ('SCRAPPEDTEMPLATE', 'Scrapped Template'), ('ASSETAUDIT', 'Asset Audit'), ('MAINTENANCETEMPLATE', 'Maintenance Template'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('QUESTIONSET', 'Question Set')], max_length=50, null=True, verbose_name='Question Set Type')),
                ('site_grp_includes', models.JSONField(blank=True, default=apps.activity.models.site_grp_includes, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='Site Groups')),
                ('site_type_includes', models.JSONField(blank=True, default=apps.activity.models.site_type_includes, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='Site Types')),
                ('url', models.CharField(blank=True, max_length=250, null=True, verbose_name='Url')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='qset_bus', to='onboarding.bt', verbose_name='Site')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='qset_clients', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='questionset_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='questionset_musers', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.questionset', verbose_name='Belongs To')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'QuestionSet',
                'verbose_name_plural': 'QuestionSets',
                'db_table': 'questionset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.QuestionSetManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('ticketno', models.IntegerField(blank=True, null=True)),
                ('ticketdesc', models.CharField(max_length=250)),
                ('comments', models.CharField(max_length=250, null=True)),
                ('priority', models.CharField(blank=True, choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=50, null=True, verbose_name='Priority')),
                ('escalationtemplate', models.CharField(blank=True, max_length=30, null=True)),
                ('modifieddatetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('level', models.IntegerField(default=0)),
                ('status', models.CharField(blank=True, choices=[('NEW', 'New'), ('CANCEL', 'Cancel'), ('CLOSE', 'Close'), ('ESCALATED', 'Escalated'), ('AUTOCLOSE', 'Autoclose'), ('ASSIGNED', 'Assigned')], max_length=50, null=True, verbose_name='Status')),
                ('ticketlog', models.JSONField(blank=True, default=apps.activity.models.ticket_defaults, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('isescalated', models.BooleanField(default=True)),
                ('ticketsource', models.CharField(blank=True, choices=[('SYSTEMGENERATED', 'System Generated'), ('USERDEFINED', 'User Defined')], max_length=50, null=True)),
                ('attcount', models.IntegerField(default=0, verbose_name='Attachment Count')),
                ('assignedtogroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ticket_grps', to='peoples.pgroup')),
                ('assignedtopeople', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ticket_people', to=settings.AUTH_USER_MODEL)),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ticket_cusers', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.event')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ticket_musers', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.ticket')),
                ('performedby', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ticket_performedby', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'ticket',
                'ordering': ['mdtz'],
                'get_latest_by': ['cdtz', 'mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSetBelonging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('ismandatory', models.BooleanField(verbose_name='Is Manadatory')),
                ('isavpt', models.BooleanField(default=False, verbose_name='Is Attachment Required')),
                ('seqno', models.SmallIntegerField(verbose_name='Seq No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], max_length=50, verbose_name='Question Type')),
                ('max', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('min', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('alerton', models.CharField(blank=True, max_length=300, null=True, verbose_name='Alert on')),
                ('options', models.CharField(blank=True, max_length=200, null=True, verbose_name='Option')),
                ('alertmails_sendto', models.JSONField(default=apps.activity.models.alertmails_sendto, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Alert mails send to')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='qsetbelong_bu', to='onboarding.bt', verbose_name='Site')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='qsetbelong_client', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='questionsetbelonging_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='questionsetbelonging_musers', to=settings.AUTH_USER_MODEL)),
                ('qset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.questionset', verbose_name='Question Set')),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.question', verbose_name='Question')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'QuestionSetBelonging',
                'verbose_name_plural': 'QuestionSetBelongings',
                'db_table': 'questionsetbelonging',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.QsetBlngManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobneedDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('seqno', models.SmallIntegerField(verbose_name='SL No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], max_length=50, null=True, verbose_name='Answer Type')),
                ('answer', models.CharField(default='', max_length=250, null=True, verbose_name='Answer')),
                ('isavpt', models.BooleanField(default=False, verbose_name='Is Attachement Required')),
                ('options', models.CharField(blank=True, max_length=200, null=True, verbose_name='Option')),
                ('min', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(blank=True, max_length=50, null=True, verbose_name='Alert On')),
                ('ismandatory', models.BooleanField(default=True, verbose_name='Is Mandatory')),
                ('alerts', models.BooleanField(default=False, verbose_name='Alerts')),
                ('attachmentcount', models.IntegerField(default=0, verbose_name='Attachment count')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneeddetails_cusers', to=settings.AUTH_USER_MODEL)),
                ('jobneed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.jobneed', verbose_name='Jobneed')),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='jobneeddetails_musers', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.question', verbose_name='Question')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'JobneedDetails',
                'db_table': 'jobneeddetails',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.JobneedDetailsManager()),
            ],
        ),
        migrations.AddField(
            model_name='jobneed',
            name='qset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.questionset', verbose_name='QuestionSet'),
        ),
        migrations.AddField(
            model_name='jobneed',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant'),
        ),
        migrations.AddField(
            model_name='jobneed',
            name='ticketcategory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.typeassist', verbose_name='Ticket Category'),
        ),
        migrations.AddField(
            model_name='job',
            name='qset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='activity.questionset', verbose_name='QuestionSet'),
        ),
        migrations.AddField(
            model_name='job',
            name='shift',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_shifts', to='onboarding.shift', verbose_name='Shift'),
        ),
        migrations.AddField(
            model_name='job',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant'),
        ),
        migrations.AddField(
            model_name='job',
            name='ticketcategory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='job_tktcategories', to='onboarding.typeassist', verbose_name='Ticket Category'),
        ),
        migrations.CreateModel(
            name='EscalationMatrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('body', models.CharField(max_length=500, null=True)),
                ('level', models.IntegerField(blank=True, null=True)),
                ('frequency', models.CharField(choices=[('MINUTE', 'MINUTE'), ('HOUR', 'HOUR'), ('DAY', 'DAY'), ('WEEK', 'WEEK')], default='DAY', max_length=10)),
                ('frequencyvalue', models.IntegerField(blank=True, null=True)),
                ('assignedfor', models.CharField(max_length=50)),
                ('escalationtemplate', models.CharField(max_length=30)),
                ('notify', models.TextField(blank=True, null=True)),
                ('assignedgroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='escalation_grps', to='peoples.pgroup')),
                ('assignedperson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='escalation_people', to=settings.AUTH_USER_MODEL)),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='escalationmatrix_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='escalationmatrix_musers', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'escalationmatrix',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceEventlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('deviceid', models.CharField(max_length=55, verbose_name='Device Id')),
                ('eventvalue', models.CharField(choices=[('AIRPLANEMODEON', 'Airplanemode On'), ('AIRPLANEMODEOFF', 'Airplanemode Off'), ('PHONESWITCHEDON', 'PhoneSwitched On'), ('PHONESWITCHEDOFF', 'PhoneSwitched Off'), ('GPSSWITCHEDON', 'Gps Switched On'), ('GPSSWITCHEDOFF', 'Gps Switched Off'), ('WIFIENABLE', 'WIFI Enable'), ('WIFIDISABLE', 'WIFI Disable'), ('MOBILEDATAENABLE', 'MobileData Enable'), ('MOBILEDATADISABLE', 'MobileData Disable')], max_length=50, verbose_name='Device Event')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(geography=True, null=True, srid=4326)),
                ('accuracy', models.CharField(default='-', max_length=25)),
                ('altitude', models.CharField(default='-', max_length=25)),
                ('receivedon', models.DateTimeField(auto_now_add=True, verbose_name='Received On')),
                ('batterylevel', models.CharField(default='NA', max_length=50, verbose_name='Battery Level')),
                ('signalstrength', models.CharField(default='NA', max_length=50, verbose_name='Signal Strength')),
                ('availintmemory', models.CharField(default='NA', max_length=50, verbose_name='Available Internal Memory')),
                ('availextmemory', models.CharField(default='NA', max_length=50, verbose_name='Available External Memory')),
                ('signalbandwidth', models.CharField(default='NA', max_length=50, verbose_name='Signal Bandwidth')),
                ('androidversion', models.CharField(default='NA', max_length=50, verbose_name='Android Version')),
                ('applicationversion', models.CharField(default='NA', max_length=50, verbose_name='App Version')),
                ('networkprovidername', models.CharField(default='NA', max_length=55)),
                ('modelname', models.CharField(default='NA', max_length=50, verbose_name='Model Name')),
                ('installedapps', models.CharField(default='NA', max_length=50, verbose_name='Installed Apps')),
                ('stepcount', models.CharField(default='No Steps', max_length=55)),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='deviveevents_clients', to='onboarding.bt', verbose_name='Client')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='deviceeventlog_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='deviceeventlog_musers', to=settings.AUTH_USER_MODEL)),
                ('people', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='deviceevent_people', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'deviceeventlog',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.DELManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('filepath', models.CharField(blank=True, max_length=100, null=True)),
                ('filename', models.ImageField(blank=True, null=True, upload_to='')),
                ('owner', models.CharField(max_length=255, null=True)),
                ('datetime', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('attachmenttype', models.CharField(choices=[('NONE', 'NONE'), ('ATTACHMENT', 'Attachment'), ('REPLY', 'Reply'), ('SIGN', 'SIGN')], default='NONE', max_length=55)),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('bu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.bt')),
                ('cuser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='attachment_cusers', to=settings.AUTH_USER_MODEL)),
                ('muser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='attachment_musers', to=settings.AUTH_USER_MODEL)),
                ('ownername', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='onboarding.typeassist')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='tenants.tenant')),
            ],
            options={
                'db_table': 'attachment',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.AttachmentManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='ticket',
            constraint=models.UniqueConstraint(fields=('bu', 'ticketno'), name='bu_ticketno_uk'),
        ),
        migrations.AddConstraint(
            model_name='questionsetbelonging',
            constraint=models.UniqueConstraint(fields=('qset', 'question', 'client', 'bu'), name='qset_question_client_bu_uk'),
        ),
        migrations.AddConstraint(
            model_name='questionset',
            constraint=models.UniqueConstraint(fields=('qsetname', 'parent', 'type', 'client', 'bu'), name='name_type_parent_type_client_bu_uk'),
        ),
        migrations.AddConstraint(
            model_name='questionset',
            constraint=models.CheckConstraint(check=models.Q(('seqno__gte', 0)), name='slno_gte_0_ck'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('quesname', 'answertype', 'client'), name='ques_name_type_client_uk'),
        ),
        migrations.AddConstraint(
            model_name='jobneed',
            constraint=models.CheckConstraint(check=models.Q(('gracetime__gte', 0)), name='jobneed_gracetime_gte_0_ck'),
        ),
        migrations.AddConstraint(
            model_name='job',
            constraint=models.UniqueConstraint(fields=('jobname', 'asset', 'qset', 'parent', 'identifier'), name='jobname_asset_qset_id_parent_identifier_uk'),
        ),
        migrations.AddConstraint(
            model_name='job',
            constraint=models.CheckConstraint(check=models.Q(('gracetime__gte', 0)), name='gracetime_gte_0_ck'),
        ),
        migrations.AddConstraint(
            model_name='job',
            constraint=models.CheckConstraint(check=models.Q(('planduration__gte', 0)), name='planduration_gte_0_ck'),
        ),
        migrations.AddConstraint(
            model_name='job',
            constraint=models.CheckConstraint(check=models.Q(('expirytime__gte', 0)), name='expirytime_gte_0_ck'),
        ),
    ]
