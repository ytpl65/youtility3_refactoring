# Generated by Django 3.1 on 2022-02-01 10:10

import apps.activity.models
import django.core.serializers.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('assetcode', models.CharField(max_length=50, verbose_name='Asset Code')),
                ('assetname', models.CharField(max_length=250, verbose_name='Asset Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('iscritical', models.BooleanField(verbose_name='Is Critical')),
                ('gpslocation', models.CharField(default='0.0,0.0', max_length=50, verbose_name='Gps Location')),
                ('identifier', models.CharField(choices=[('NONE', 'None'), ('ASSET', 'Asset'), ('CHECKPOINT', 'Checkpoint'), ('LOCATION', 'Location'), ('SMARTPLACE', 'Smartplace')], max_length=55, verbose_name='Asset Identifier')),
                ('runningstatus', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working'), ('SCRAPPED', 'Scrapped')], max_length=55, verbose_name='Running Status')),
                ('capacity', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, verbose_name='Capacity')),
                ('asset_json', models.JSONField(blank=True, default=apps.activity.models.asset_json, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'db_table': 'asset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('jobname', models.CharField(max_length=100, verbose_name='Name')),
                ('jobdesc', models.CharField(max_length=500, verbose_name='Description')),
                ('from_date', models.DateTimeField(verbose_name='From date')),
                ('upto_date', models.DateTimeField(verbose_name='To date')),
                ('cron', models.CharField(max_length=200, verbose_name='Cron Exp.')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('INTERNALTOUR', 'Internal Tour'), ('EXTERNALTOUR', 'External Tour'), ('PPM', 'PPM'), ('OTHER', 'Other')], max_length=100, null=True, verbose_name='Job Type')),
                ('planduration', models.IntegerField(verbose_name='Plan duration (min)')),
                ('gracetime', models.IntegerField(verbose_name='Grace Time')),
                ('expirytime', models.IntegerField(verbose_name='Expiry Time')),
                ('lastgeneratedon', models.DateTimeField(auto_now_add=True, verbose_name='Last generatedon')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=100, verbose_name='Priority')),
                ('slno', models.SmallIntegerField(verbose_name='Serial No.')),
                ('starttime', models.TimeField(null=True, verbose_name='Start time')),
                ('endtime', models.TimeField(null=True, verbose_name='End time')),
                ('scantype', models.CharField(choices=[('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], max_length=50, verbose_name='Scan Type')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], max_length=55, null=True, verbose_name='Frequency type')),
                ('ctzoffset', models.CharField(blank=True, max_length=55, null=True, verbose_name='TZ_Offset')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'db_table': 'job',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Jobneed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('jobdesc', models.CharField(max_length=200, verbose_name='Job Description')),
                ('plandatetime', models.DateTimeField(verbose_name='Plan date time')),
                ('expirydatetime', models.DateTimeField(verbose_name='Expiry date time')),
                ('gracetime', models.IntegerField(verbose_name='Grace time')),
                ('recievedon_server', models.DateTimeField(auto_now_add=True, verbose_name='Recived on server')),
                ('starttime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('endtime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('gpslocation', models.CharField(default='0.0,0.0', max_length=50, verbose_name='Gps Location')),
                ('remarks', models.CharField(blank=True, max_length=200, null=True, verbose_name='Remark')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], max_length=55, null=True, verbose_name='Frequency type')),
                ('jobstatus', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('AUTOCLOSED', 'Auto Closed'), ('COMPLETED', 'Completed'), ('INPROGRESS', 'Inprogress'), ('PARTIALLYCOMPLETED', 'Partially Completed')], max_length=60, null=True, verbose_name='Job Status')),
                ('jobtype', models.CharField(choices=[('SCHEDULE', 'Schedule'), ('ADHOC', 'Adhoc')], max_length=50, null=True, verbose_name='Job Type')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=50, verbose_name='Priority')),
                ('scantype', models.CharField(choices=[('NONE', 'None'), ('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], max_length=50, verbose_name='Scan type')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('Tour', 'Tour'), ('PPM', 'PPM'), ('OTHER', 'Other')], max_length=50, null=True, verbose_name='Jobneed Type')),
                ('alerts', models.BooleanField(default=False, null=True, verbose_name='Alerts')),
                ('ticketno', models.IntegerField(default=0, verbose_name='Ticket No')),
                ('slno', models.SmallIntegerField(verbose_name='Sl No.')),
                ('othersite', models.CharField(default=None, max_length=100, null=True, verbose_name='Other Site')),
                ('mult_factor', models.DecimalField(decimal_places=6, default=1, max_digits=10, verbose_name='Multiplication Factor')),
                ('raisedby', models.CharField(default='', max_length=55, null=True, verbose_name='Raised by')),
                ('raisedtktflag', models.BooleanField(default=False, null=True, verbose_name='RaiseTicketFlag')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
                ('ctzoffset', models.IntegerField(blank=True, null=True, verbose_name='TZ_Offset')),
            ],
            options={
                'verbose_name': 'Jobneed',
                'verbose_name_plural': 'Jobneeds',
                'db_table': 'jobneed',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobneedDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('slno', models.SmallIntegerField(verbose_name='SL No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], max_length=50, null=True, verbose_name='Answer Type')),
                ('answer', models.CharField(default='', max_length=250, verbose_name='Answer')),
                ('options', models.CharField(blank=True, max_length=200, null=True, verbose_name='Option')),
                ('min', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(blank=True, max_length=50, null=True, verbose_name='Alert On')),
                ('is_mandatory', models.BooleanField(default=False, verbose_name='Is Mandatory')),
                ('alerts', models.BooleanField(default=False, verbose_name='Alerts')),
            ],
            options={
                'verbose_name': 'JobneedDetails',
                'db_table': 'jobneed_details',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('ques_name', models.CharField(max_length=200, verbose_name='Question Name')),
                ('options', models.TextField(max_length=2000, null=True, verbose_name='Options')),
                ('min', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(max_length=300, null=True, verbose_name='Alert on')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], default='NUMERIC', max_length=55, verbose_name='Type')),
                ('isworkflow', models.BooleanField(default=False, verbose_name='Is WorkFlow')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'question',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('qset_name', models.CharField(max_length=200, verbose_name='QuestionSet Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('assetincludes', models.TextField(blank=True, null=True)),
                ('buincludes', models.TextField(blank=True, null=True)),
                ('slno', models.SmallIntegerField(default=1, verbose_name='SL No.')),
                ('type', models.CharField(choices=[('CHECKLIST', 'Checklist'), ('INCIDENTREPORTTEMPLATE', 'Incident Report Template'), ('SITEREPORTTEMPLATE', 'Site Report Template'), ('WORKPERMITTEMPLATE', 'Work Permit Template'), ('KPITEMPLATE', 'Kpi Template'), ('SCRAPPEDTEMPLATE', 'Scrapped Template'), ('ASSETAUDIT', 'Asset Audit'), ('MAINTENANCETEMPLATE', 'Maintenance Template'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('QUESTIONSET', 'Question Set')], max_length=50, null=True, verbose_name='Question Set Type')),
                ('site_grp_includes', models.JSONField(blank=True, default=apps.activity.models.site_grp_includes, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='Site Groups')),
                ('site_type_includes', models.JSONField(blank=True, default=apps.activity.models.site_type_includes, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='Site Types')),
                ('url', models.CharField(blank=True, max_length=250, null=True, verbose_name='Url')),
            ],
            options={
                'verbose_name': 'QuestionSet',
                'verbose_name_plural': 'QuestionSets',
                'db_table': 'questionset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionSetBelonging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(auto_now_add=True, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(auto_now=True, verbose_name='mdtz')),
                ('ismandatory', models.BooleanField(verbose_name='Is Manadatory')),
                ('slno', models.SmallIntegerField(verbose_name='Seq No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List')], max_length=50, verbose_name='Question Type')),
                ('max', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('min', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('alerton', models.CharField(blank=True, max_length=300, null=True, verbose_name='Alert on')),
                ('options', models.CharField(blank=True, max_length=200, null=True, verbose_name='Option')),
                ('alertmails_sendto', models.JSONField(default=apps.activity.models.alertmails_sendto, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Alert mails send to')),
            ],
            options={
                'verbose_name': 'QuestionSetBelonging',
                'verbose_name_plural': 'QuestionSetBelongings',
                'db_table': 'questionsetbelonging',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
    ]
