"""
Django settings for intelliwiz_config project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""



from pathlib import Path
import os
from pickle import TRUE

import environ
env = environ.Env()

ENVPATH = os.path.join(os.path.abspath('intelliwiz_config/envs'))
environ.Env.read_env(os.path.join(ENVPATH, '.env.prod'), overwrite=True) #rename it '.env.prod' for production


def check_path(path):
    path = Path(path)
    if not os.path.exists(path):
        path.mkdir(parents=True, exist_ok=True)
    return bool(os.access(path, os.R_OK) and os.access(path, os.W_OK))

# Build paths inside the project like this: BASE_DIR / 'subdir'.p
BASE_DIR = Path(__file__).resolve().parent.parent





# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
ENCRYPT_KEY = env('ENCRYPT_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True    

ALLOWED_HOSTS = ['.localhost', 'demo.youtility.in']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    # third_party_apps
    'graphene_django',
    'graphene_gis',
    "django_email_verification",
    'debug_toolbar',
    'import_export',
    'django_extensions',
    "django_select2",
    'django_filters',
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'leaflet',
    'corsheaders',

    # local apps
    'apps.peoples',
    'apps.onboarding',
    'apps.tenants',
    'apps.attendance',
    'apps.activity',
    'apps.schedhuler',
    'apps.reports',
    'apps.service',
    'apps.reminder',
    'apps.y_helpdesk',
    'apps.work_order_management',

    # third-party apps
    'django_cleanup.apps.CleanupConfig'

]

MIDDLEWARE = [
    #'apps.tenants.middlewares.TenantMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
     'apps.onboarding.middlewares.TimezoneMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


#customize the message tags to match Bootstrap's CSS classes
from django.contrib.messages import constants as message_constants
MESSAGE_TAGS = {
    message_constants.DEBUG: 'alert-info',
    message_constants.INFO: 'alert-info',
    message_constants.SUCCESS: 'alert-success',
    message_constants.WARNING: 'alert-warning',
    message_constants.ERROR: 'alert-danger',
}

ROOT_URLCONF = 'intelliwiz_config.urls'

JINJA_TEMPLATES = os.path.join(BASE_DIR, 'frontend/templates')
import jinja2
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'apps.peoples.context_processors.app_settings',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',

            ],

        },
    },
    # jinja2 configuration
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [JINJA_TEMPLATES],
        'APP_DIRS': True,
        'OPTIONS':{
            'extensions': ['jinja2.ext.loopcontrols',],
            'autoescape' : False,
            'auto_reload': True,
            'undefined'  : jinja2.StrictUndefined,
            'environment': 'intelliwiz_config.jinja.env.JinjaEnvironment',
            'context_processors': [
                'apps.peoples.context_processors.app_settings',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'intelliwiz_config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/# databases
'''
NOTE: Client bucode should match the database alias name.
'''
#DATABASES = youtility_dbs
DATABASES = {
    'default': {
        'ENGINE':   'django.contrib.gis.db.backends.postgis',
        'USER':     env('DBUSER'),
        'NAME':     env('DBNAME'),
        'PASSWORD': env('DBPASS'),
        'HOST':     env('DBHOST'),
        'PORT':     '5432',
    },
}   

# SELECT2 CONF...
SELECT2_CACHE_BACKEND = 'select2'
SELECT2_JS = ""
SELECT2_CSS = ""
SELECT2_I18N_PATH = 'assets/plugins/custom/select2-4.x/js/i18n'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
       "KEY_PREFIX": "youtility4"
    },
    "redis_session_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
       "KEY_PREFIX": "y4session"
    },
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
       "KEY_PREFIX": "select2"
    }
}
# SESSION SETTINGS

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'redis_session_cache'
SESSION_COOKIE_SECURE = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = True # close the session when user closes the browser
SESSION_COOKIE_AGE = 60**2
SESSION_SAVE_EVERY_REQUEST = True


# CELERY SETTINGS

CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
CELERY_BEAT_SCHEDULER = env('CELERY_BEAT_SCHEDULER')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_EXTENDED=True



# Cache time to live is 15 minutes.
CACHE_TTL = 60 * 1

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/# auth-password-validators

# PASSWORD VALIDATORS...
AUTH_PASSWORD_VALIDATORS = [
    #{
    #    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    #},
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    #{
    #    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    #},
    #{
    #    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    #},
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = False

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/# default-auto-field

# Media Files CONF..
MEDIA_ROOT = env("MEDIA_ROOT")
if not check_path(MEDIA_ROOT):
    raise ValueError(f"`{MEDIA_ROOT}` not readable and writable")

MEDIA_URL = '/youtility4_media/'
# DATETIME INPUTS CONF...
DATETIME_INPUT_FORMATS = [
    '%d-%b-%Y %H:%M:%S',   # 22-May-1998 13:01# 
   "%Y-%m-%d %H:%M:%S",   #1998-05-18 13:01:00
   "%d-%b-%Y %H:%M"
]
DATE_INPUT_FORMATS = [
    '%d-%b-%Y',
    '%d/%b/%Y',
    '%d/%m/%Y',
    "%Y-%m-%d",
    "%Y/%m/%d",
    "%Y-%m-%dT%H:%M:%S%z"
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT =  env("STATIC_ROOT")
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'frontend/static')]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/# default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASE_ROUTERS = ['apps.tenants.middlewares.TenantDbRouter']

# Media Files

INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # ...
]

# USER MODEL
AUTH_USER_MODEL = 'peoples.People'

# AUTHENTICATIN BACKENDS CONF...
AUTHENTICATION_BACKENDS = ["graphql_jwt.backends.JSONWebTokenBackend",
'apps.peoples.backends.MultiAuthentcationBackend',
'django.contrib.auth.backends.ModelBackend']

# GRAPHENE CONF...
GRAPHENE = {
    # ...
    "ATOMIC_MUTATIONS": True,
    "SCHEMA": "apps.service.schema.schema",
    'MIDDLEWARE': [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ]
}

# GRAPHQL JWT CONF...
from datetime import timedelta
GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": False,
    #"JWT_EXPIRATION_DELTA": timedelta(minutes = mins),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days = 7),
    # optional
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
}

ADMINS = [('youtility_staff', "naveen.sargam@youtility.in")]

# LOGGING CONF...
import logging.config
LOGGING_CONFIG = None
LOGGING_CONFIG_ = { 
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': { 
        'coloured': { 
            '()': 'colorlog.ColoredFormatter',
            'format': '%(log_color)s %(asctime)s  %(levelname)-10s  from method: %(funcName)-32s  << %(message)s >>'
        },
    }, 
    'handlers': {
        'default': { 
            #'level': 'INFO',
            'formatter': 'coloured',
            'class': 'logging.StreamHandler', 
            'stream': 'ext://sys.stdout',  # Default is stderr
        },
        'filelogs': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename':f'{env("LOG_ROOT")}/youtility4.log',
            'maxBytes': 15728640,
            'backupCount': 10,
            'formatter': 'coloured',
        },
        'serviceLogs':{
            'class': 'logging.handlers.RotatingFileHandler',
            'filename':f'{env("LOG_ROOT")}/mobileservice.log',
            'maxBytes': 15728640,
            'backupCount': 10,
            'formatter': 'coloured',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': False,
        }
    },
    'loggers': { 
        '': {  # root logger
            'handlers': ['default'],
            'level': 'WARNING',
            'propagate': False 
        },
        'django': { 
            'handlers': ['default', 'filelogs'],
            'level': 'INFO',
            'propagate': False
        },
        '__main__': {  # if __name__ == '__main__'
            'handlers': ['default', 'filelogs'],
            'level': 'DEBUG',
            'propagate': False
        },
        'mobile_service_log':{
            'handlers': ['default', 'serviceLogs'],
            'level': 'DEBUG',
            'propagate': False
        }               
    }
}

if not check_path(LOGGING_CONFIG_['handlers']['filelogs']['filename']):
    raise ValueError(f"`{LOGGING_CONFIG_['handlers']['filelogs']['filename']}` not readable and writable")
if not check_path(LOGGING_CONFIG_['handlers']['serviceLogs']['filename']):
    raise ValueError(f"`{LOGGING_CONFIG_['handlers']['serviceLogs']['filename']}` not readable and writable")
logging.config.dictConfig(LOGGING_CONFIG_)

# LOGIN URL NAME... 
LOGIN_URL = 'login'



# DJANGO_IMPORT_EXPORT CONF...
IMPORT_EXPORT_USE_TRANSACTIONS = True

# DJANGO-EXTENSIONS CONF...
SHELL_PLUS_PRINT_SQL = True
GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}

# Email Verification CONF...
def verified_callback(user):
    user.isverified = True
    user.is_staff=True

EMAIL_VERIFIED_CALLBACK = verified_callback
EMAIL_FROM_ADDRESS = env('EMAIL_FROM_ADDRESS')
EMAIL_MAIL_SUBJECT = 'Confirm your email'
EMAIL_MAIL_HTML = 'email.html'
EMAIL_MAIL_PLAIN = 'mail_body.txt'
EMAIL_TOKEN_LIFE = 60**2
EMAIL_PAGE_TEMPLATE = 'email_verify.html'
EMAIL_PAGE_DOMAIN = env('EMAIL_PAGE_DOMAIN')
EMAIL_MULTI_USER = True  # optional (defaults to False)


# For Django Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True
DJANGO_SETTINGS_MODULE = 'intelliwiz_config.settings'


# DJANGO TAGGIT CONF...
TAGGIT_CASE_INSENSITIVE = True

# GOOGLE MAP API KEY...
GOOGLE_MAP_SECRET_KEY  = env('GOOGLE_MAP_SECRET_KEY')

CSRF_COOKIE_SECURE=False
SESSION_COOKIE_SECURE=False
SECURE_SSL_REDIRECT=False


DATA_UPLOAD_MAX_MEMORY_SIZE = int(env('DATA_UPLOAD_MAX_MEMORY_SIZE'))
NOTEBOOK_ARGUMENTS = [
    '--ip', '192.168.1.254',
    '--port', '8001',
]



SITE_ID = 1
JDBC_DRIVER_PATH = env('JDBC_DRIVER_PATH')

HOST = env('HOST')


# Knowage server details
KNOWAGE_USERNAME = env('KNOWAGE_USERNAME')
KNOWAGE_PASS = env('KNOWAGE_PASS')
KNOWAGE_SERVER_URL = env('KNOWAGE_SERVER_URL')
KNOWAGE_DATASOURCE = 'Redmine Database'
COMPANYNAME = 'Youtility Technologies Pvt. Ltd.'
KNOWAGE_REPORTS = {
    # 'KEY' : 'DOCUMENT_LABEL USED IN KNOWAGESERVER'
    'TASKSUMMARY':'TaskSummary',
    'TOURSUMMARY':"TourSummary",
    'LISTOFTASKS':'ListOfTasks',
    'LISTOFINTERNALTOURS':'ListOfInternalTours',
    'PPMSUMMARY':'PPMSummary',
    'LISTOFTICKETS':'ListOfTickets',
    'WORKORDERLIST':'WorkOrderList',
}

TEST_RUNNER = 'intelliwiz_config.test_runner.MyTestRunner'


CLIENT_DOMAINS = {
    'R_REDMINE'  : 'redmine.youtility.in',
    'R_TOURTRAX' : 'redmine.youtility.in',
    'R_SUKHI'    : 'redmine.youtility.in',
    'R_CAPGEMINI': 'redmine.youtility.in',
    'D_SUKHI'    : 'demo.youtility.in',
    'D_CAPGEMINI': 'demo.youtility.in',
    'SUKHI'      : 'sg.youtility.in',
}