"""
Django settings for intelliwiz_config project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()  # loads the configs from .env
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv('SECRET_KEY'))
SECRET_SALT = str(os.getenv('SECRET_SALT'))
ENCRYPT_KEY = str(os.getenv('ENCRYPT_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.localhost', '.youtility.local', 'barfi.youtility.in', '127.0.0.1', 'intelliwiz.youtility.in']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    #third_party_apps
    'graphene_django',
    'graphene_gis',
    'django_email_verification',
    'debug_toolbar',
    'import_export',
    'django_extensions',
    "django_select2",
    'django_filters',
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    'rest_framework',
    

    #local apps
    'apps.peoples',
    'apps.onboarding',
    'apps.tenants',
    'apps.attendance',
    'apps.activity',
    'apps.schedhuler',
    'apps.reports',
    'apps.service',

    #third-party apps
    'django_cleanup.apps.CleanupConfig'

]

MIDDLEWARE = [
    'apps.tenants.middlewares.TenantMiddleware', #custom middleware
    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'intelliwiz_config.urls'

JINJA_TEMPLATES = os.path.join(BASE_DIR, 'frontend/templates')
import jinja2
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],

        },
    },
    #jinja2 configuration
    { 
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [JINJA_TEMPLATES],
        'APP_DIRS': True,
        'OPTIONS':{
            'extensions': ['jinja2.ext.loopcontrols',],
            'autoescape' : False,
            'auto_reload': True,
            'undefined'  : jinja2.StrictUndefined,
            'environment': 'intelliwiz_config.jinja.env.JinjaEnvironment'
        },
    },
]


WSGI_APPLICATION = 'intelliwiz_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

#multi database configuration.
DBUSER = str(os.getenv('DBUSER'))
DBPASWD = str(os.getenv('DBPASWD'))
DBHOST = str(os.getenv('DBHOST'))
'''
NOTE: Client bucode should match the database alias name.
'''
youtility_dbs = {
    'default': {
        'ENGINE':   'django.contrib.gis.db.backends.postgis',
        'USER':     DBUSER,
        'NAME':     'sps_django',
        'PASSWORD': DBPASWD,
        'HOST':     DBHOST,
        'PORT':     '5432',
    },

    'icicibank':{
        'ENGINE':   'django.contrib.gis.db.backends.postgis',
        'USER':     DBUSER,
        'NAME':     'icici_django',
        'PASSWORD': DBPASWD,
        'HOST':     DBHOST,
        'PORT':     '5432',
    },
}



home_local_dbs = {
    'default': {
        'ENGINE':   'django.contrib.gis.db.backends.postgis',
        'USER':     'youtilitydba',
        'NAME':     'intelliwiz_django',
        'PASSWORD': 'admin',
        'HOST':     'localhost',
        'PORT':     '5432',
    },
    'sps':{
        'ENGINE':   'django.contrib.gis.db.backends.postgis',
        'USER':     'youtilitydba',
        'NAME':     'sps_django',
        'PASSWORD': 'admin',
        'HOST':     'localhost',
        'PORT':     '5432',
    }

    
}


DATABASES = youtility_dbs
# DATABASES = {
#         'default':{
#             'ENGINE':   'django.contrib.gis.db.backends.postgis',
#             'USER':     'navin',
#             'NAME':     'intelliwiz_django',
#             'PASSWORD': 'admin',
#             'HOST':     'localhost',
#             'PORT':     '',
#         }
#     } 



CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
       "KEY_PREFIX": "youtility4"
    },
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
       "KEY_PREFIX": "select2"
    }
}
#CELERY CONF...
CELERY_BROKER_URL = str(os.getenv('CELERY_BROKER_URL'))
CELERY_CACHE_BACKEND = str(os.getenv('CELERY_CACHE_BACKEND'))
CELERY_RESULT_BACKEND = str(os.getenv('CELERY_RESULT_BACKEND'))

#SELECT2 CONF...
SELECT2_CACHE_BACKEND = 'select2'
SELECT2_JS = ""
SELECT2_CSS = ""
SELECT2_I18N_PATH = 'assets/plugins/custom/select2-4.x/js/i18n'

# Cache time to live is 15 minutes.
CACHE_TTL = 60 * 5

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators


#PASSWORD VALIDATORS...
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

# Media Files CONF...
MEDIA_ROOT = os.path.join(os.path.expanduser('~'), 'youtility4_media')
MEDIA_URL = '/youtility4_media/'


#DATETIME INPUTS CONF...
DATETIME_INPUT_FORMATS = [
    '%d-%b-%Y %H:%M:%S',   #22-May-1998 13:01
   "%Y-%m-%d %H:%M:%S",   #1998-05-18 13:01:00
   "%d-%b-%Y %H:%M"
]
DATE_INPUT_FORMATS = [
    '%d-%b-%Y',
    '%d/%b/%Y',
    '%d/%m/%Y',
    "%Y-%m-%d",
    "%Y/%m/%d"
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'frontend/static')]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASE_ROUTERS = ['apps.tenants.middlewares.TenantDbRouter']

# Media Files

INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # ...
]

#USER MODEL
AUTH_USER_MODEL = 'peoples.People'


#AUTHENTICATIN BACKENDS CONF...
AUTHENTICATION_BACKENDS = ["graphql_jwt.backends.JSONWebTokenBackend",
'apps.peoples.backends.MultiAuthentcationBackend',
'django.contrib.auth.backends.ModelBackend']


#GRAPHENE CONF...
GRAPHENE = {
    # ...
    "ATOMIC_MUTATIONS": True,
    "SCHEMA": "apps.service.schema.schema",
    'MIDDLEWARE': [
        'graphene_django.debug.DjangoDebugMiddleware',
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ]
}


#GRAPHQL JWT CONF...
from datetime import timedelta
GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_EXPIRATION_DELTA": timedelta(minutes = 7*24*60),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days = 7),
    # optional
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
}

#LOGGING CONF...
import logging.config
LOGGING_CONFIG = None
LOGGING_CONFIG_ = { 
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': { 
        'coloured': { 
            '()': 'colorlog.ColoredFormatter',
            'format': '%(log_color)s %(asctime)s  %(levelname)-10s  from method: %(funcName)-32s  << %(message)s >>'
        },
    }, 
    'handlers': {
        'default': { 
            #'level': 'INFO',
            'formatter': 'coloured',
            'class': 'logging.StreamHandler', 
            'stream': 'ext://sys.stdout',  # Default is stderr
        },
    },
    'loggers': { 
        '': {  # root logger
            'handlers': ['default'],
            'level': 'WARNING',
            'propagate': False 
        },
        'django': { 
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': False
        },
        '__main__': {  # if __name__ == '__main__'
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False
        },                 
    } 
}
logging.config.dictConfig(LOGGING_CONFIG_)

#LOGIN URL NAME...
LOGIN_URL = 'login'


#SESSION CONF....
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_COOKIE_SECURE = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = False # close the session when user closes the browser
SESSION_COOKIE_AGE = 60**2
SESSION_SAVE_EVERY_REQUEST = True


#DJANGO_IMPORT_EXPORT CONF...
IMPORT_EXPORT_USE_TRANSACTIONS = True

#DJANGO-EXTENSIONS CONF...
SHELL_PLUS_PRINT_SQL = True
GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}

#Email Verification CONF...
def verified_callback(user):
    user.isverified = True


EMAIL_VERIFIED_CALLBACK = verified_callback
EMAIL_FROM_ADDRESS = 'snvnrock@gmail.com'
EMAIL_MAIL_SUBJECT = 'Confirm your email'
EMAIL_MAIL_HTML = 'email.html'
EMAIL_MAIL_PLAIN = 'mail_body.txt'
EMAIL_TOKEN_LIFE = 60**2
EMAIL_PAGE_TEMPLATE = 'email_verify.html'
EMAIL_PAGE_DOMAIN = 'http://127.0.0.1:8000/'
EMAIL_MULTI_USER = True  # optional (defaults to False)

# # DJANGO EMAIL BACKEND CONF...
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# #EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# #DEFAULT_FROM_EMAIL = "snvnrock@gmail.com"
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'snvnrock@gmail.com' #str(os.getenv('EMAIL_HOST_USER'))
# EMAIL_HOST_PASSWORD = '8007008467Na'  #str(os.getenv('EMAIL_HOST_PASSWORD')) # os.environ['password_key'] suggested
# EMAIL_USE_TLS = True

# For Django Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = "snvnrock@gmail.com"
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'mwaghtest@gmail.com'
EMAIL_HOST_PASSWORD = 'mwaghtest@123'  # os.environ['password_key'] suggested
EMAIL_USE_TLS = True


#DJANGO TAGGIT CONF...
TAGGIT_CASE_INSENSITIVE = True

#GOOGLE MAP API KEY...
GOOGLE_MAP_SECRET_KEY  = str(os.getenv('GOOGLE_MAP_SECRET_KEY'))




